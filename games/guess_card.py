from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from typing import Dict, List, Tuple
from utils.card_manager import CardManager

class GuessCardGame:
    def __init__(self):
        self.card_manager = CardManager()
        self.current_games = {}  # {user_id: {"target_card": card, "options": [cards]}}

    def start_new_game(self, user_id: int) -> Tuple[Dict, List[Dict], InlineKeyboardMarkup]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        all_cards = self.card_manager.get_all_cards()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        target_card = random.choice(all_cards)
        
        # –í—ã–±–∏—Ä–∞–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã (–Ω–µ –≤–∫–ª—é—á–∞—è —Ü–µ–ª–µ–≤—É—é)
        other_cards = [card for card in all_cards if card['en'] != target_card['en']]
        options = random.sample(other_cards, 4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∫–∞—Ä—Ç—É –≤ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        insert_pos = random.randint(0, 4)
        options.insert(insert_pos, target_card)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.current_games[user_id] = {
            "target_card": target_card,
            "options": options
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        for i, card in enumerate(options):
            keyboard.add(InlineKeyboardButton(
                f"üé¥ –ö–∞—Ä—Ç–∞ {i + 1}",
                callback_data=f"guess_{i}"
            ))
        
        return target_card, options, keyboard

    def check_guess(self, user_id: int, selected_index: int) -> Tuple[bool, Dict, Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ä—Ç—É."""
        if user_id not in self.current_games:
            return False, None, None
            
        game_state = self.current_games[user_id]
        selected_card = game_state["options"][selected_index]
        is_correct = selected_card['en'] == game_state["target_card"]['en']
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if is_correct:
            del self.current_games[user_id]
            
        return is_correct, game_state["target_card"], selected_card

def get_try_again_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "üé≤ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
            callback_data="try_again"
        ),
        InlineKeyboardButton(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="return_to_menu"
        )
    )
    return keyboard 