import asyncio
from datetime import datetime, time, timedelta
import logging
from aiogram import Bot
from utils.user_manager import UserManager
from utils.card_manager import CardManager
from settings import settings

class DailyPredictionManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.user_manager = UserManager()
        self.card_manager = CardManager()
        self.is_running = False
    
    async def send_daily_predictions(self):
        subscribers = self.user_manager.get_daily_prediction_subscribers()
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        for user_id in subscribers:
            try:
                user = self.user_manager.get_user(user_id)
                card = self.card_manager.get_random_card()
                
                message_text = (
                    "üåü –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                    f"üé¥ *{card['ru']}*\n\n"
                    f"‚ú® {card['–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']}\n\n"
                    "–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! ‚ú®"
                )
                
                if user["show_images"]:
                    image_path = f"{settings.IMAGES_PATH}{card['en']}.jpg"
                    try:
                        with open(image_path, 'rb') as photo:
                            await self.bot.send_photo(
                                user_id,
                                photo=photo,
                                caption=message_text,
                                parse_mode="Markdown"
                            )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        await self.bot.send_message(
                            user_id,
                            message_text,
                            parse_mode="Markdown"
                        )
                else:
                    await self.bot.send_message(
                        user_id,
                        message_text,
                        parse_mode="Markdown"
                    )
                    
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
    
    async def schedule_daily_predictions(self):
        if self.is_running:
            return
            
        self.is_running = True
        logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        while True:
            try:
                now = datetime.now()
                target_time = time(hour=8, minute=0)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 8:00 —É—Ç—Ä–∞
                
                if now.time() > target_time:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    tomorrow = datetime.combine(now.date(), target_time) + timedelta(days=1)
                    seconds_until_target = (tomorrow - now).total_seconds()
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∂–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è
                    target = datetime.combine(now.date(), target_time)
                    seconds_until_target = (target - now).total_seconds()
                
                logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {seconds_until_target} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await asyncio.sleep(seconds_until_target)
                
                await self.send_daily_predictions()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π 