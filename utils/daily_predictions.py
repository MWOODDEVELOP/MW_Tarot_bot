import asyncio
from datetime import datetime, time, timedelta
import logging
from aiogram import Bot
from utils.user_manager import UserManager
from utils.card_manager import CardManager
from utils.image_manager import ImageManager
from handlers import last_messages
from io import BytesIO
import pytz
import random

class DailyPredictionManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.user_manager = UserManager()
        self.card_manager = CardManager()
        self.image_manager = ImageManager()
        self.is_running = False
    
    async def send_daily_predictions(self):
        subscribers = self.user_manager.get_daily_prediction_subscribers()
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        for user_id in subscribers:
            try:
                user = self.user_manager.get_user(user_id)
                card = self.card_manager.get_random_card()
                
                message_text = (
                    "üåü –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                    f"üé¥ *{card['ru']}*\n\n"
                    f"‚ú® {card['–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']}\n\n"
                    "–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! ‚ú®"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
                old_message_id = None
                if str(user_id) in last_messages and "bot" in last_messages[str(user_id)]:
                    old_message_id = last_messages[str(user_id)]["bot"]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if user["show_images"]:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ImageManager
                        image_bytes = await self.image_manager.get_image(card['en'])
                        if image_bytes:
                            photo = BytesIO(image_bytes)
                            photo.name = f"{card['en']}.jpg"
                            new_message = await self.bot.send_photo(
                                user_id,
                                photo=photo,
                                caption=message_text,
                                parse_mode="Markdown"
                            )
                        else:
                            new_message = await self.bot.send_message(
                                user_id,
                                message_text + "\n\n‚ö†Ô∏è _–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_",
                                parse_mode="Markdown"
                            )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        new_message = await self.bot.send_message(
                            user_id,
                            message_text,
                            parse_mode="Markdown"
                        )
                else:
                    new_message = await self.bot.send_message(
                        user_id,
                        message_text,
                        parse_mode="Markdown"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                last_messages[str(user_id)] = {"bot": new_message.message_id}
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                if old_message_id:
                    try:
                        await self.bot.delete_message(user_id, old_message_id)
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
    
    async def schedule_daily_predictions(self):
        if self.is_running:
            return
            
        self.is_running = True
        logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        while True:
            try:
                now = datetime.now()
                target_time = time(hour=8, minute=0)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 8:00 —É—Ç—Ä–∞
                
                if now.time() > target_time:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    tomorrow = datetime.combine(now.date(), target_time) + timedelta(days=1)
                    seconds_until_target = (tomorrow - now).total_seconds()
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∂–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è
                    target = datetime.combine(now.date(), target_time)
                    seconds_until_target = (target - now).total_seconds()
                
                logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {seconds_until_target} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                await asyncio.sleep(seconds_until_target)
                
                await self.send_daily_predictions()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π 