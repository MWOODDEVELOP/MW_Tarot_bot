from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
import os
from config import IMAGES_PATH
from utils.card_manager import CardManager

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è"))
    keyboard.add(KeyboardButton("–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ö–∞—Ä—å–µ—Ä–∞"))
    keyboard.add(KeyboardButton("–ö–∞—Ä—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü"), KeyboardButton("–ö–∞—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    keyboard.add(KeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    return keyboard

async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–∏—Ä –¢–∞—Ä–æ!* üåü\n\n"
        "üîÆ –Ø - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä —Ç–∞–π–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –¥—Ä–µ–≤–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. "
        "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "‚ú® *–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:*\n"
        "üìà *–§–∏–Ω–∞–Ω—Å—ã* - —É–∑–Ω–∞–π—Ç–µ –æ —Å–≤–æ–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –±—É–¥—É—â–µ–º\n"
        "‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è* - –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç –≤ –¥–µ–ª–∞—Ö —Å–µ—Ä–¥–µ—á–Ω—ã—Ö\n"
        "üíº *–ö–∞—Ä—å–µ—Ä–∞* - —Ä–∞—Å–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n"
        "üåÖ *–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* - —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –¥–µ–Ω—å\n"
        "üåô *–ö–∞—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é* - –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ\n"
        "üåü *–ö–∞—Ä—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü* - –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ –º–µ—Å—è—Ü\n\n"
        "üé¥ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ —è –≤—ã–±–µ—Ä—É —Ç—Ä–∏ –∫–∞—Ä—Ç—ã, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö. "
        "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç –≤ —Å–µ–±–µ –æ—Å–æ–±–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∏ –º—É–¥—Ä–æ—Å—Ç—å –≤–µ–∫–æ–≤.\n\n"
        "üîç –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–∞–≤—à–µ–π –∫–∞—Ä—Ç—ã "
        "–∏ –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
        "üåå *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ—ë –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É –Ω–∏–∂–µ üëá"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if CardManager.has_saved_spread(user_id):
        welcome_text += "\n\nüîÆ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º–∞—Ç–∏–∫—É)"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
    await message.reply(welcome_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

async def handle_theme(message: types.Message):
    user_id = str(message.from_user.id)
    theme = message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥
    cards = CardManager.generate_spread()
    user_data[user_id] = {"theme": theme, "cards": cards}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥
    CardManager.save_spread(user_id, theme, cards)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    cards_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cards_keyboard.add(
        KeyboardButton("üé¥ –ö–∞—Ä—Ç–∞ ‚ë†"),
        KeyboardButton("üé¥ –ö–∞—Ä—Ç–∞ ‚ë°"),
        KeyboardButton("üé¥ –ö–∞—Ä—Ç–∞ ‚ë¢")
    )
    
    await message.reply(
        "üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ —Ä–∞–∑–ª–æ–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤–∞–º–∏...\n"
        "‚ú® –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç:\n"
        "‚ë† - –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞\n"
        "‚ë° - –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞\n"
        "‚ë¢ - –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞",
        reply_markup=cards_keyboard
    )

async def handle_card_choice(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        await message.reply(
            "‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–º—É –¥–ª—è –≥–∞–¥–∞–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if "‚ë†" in message.text:
        chosen_index = 0
    elif "‚ë°" in message.text:
        chosen_index = 1
    else:
        chosen_index = 2

    card_info = CardManager.get_card_info(user_data[user_id]["cards"][chosen_index])
    
    if card_info is None:
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ.",
            reply_markup=get_main_keyboard()
        )
        return
        
    theme = user_data[user_id]["theme"]
    user_data[user_id]["current_card"] = card_info

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    prediction = card_info.get(theme, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    prediction_text = (
        f"üåü –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É {card_info['ru']}...\n\n"
        f"‚ú® –í–æ—Ç —á—Ç–æ –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ:\n\n"
        f"üîÆ {prediction}\n\n"
        f"üìú –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥—Ä–µ–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–π –∫–∞—Ä—Ç—ã?\n"
        f"üîÑ –ò–ª–∏ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–π —Ç–µ–º—ã?"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    image_name = card_info['en'].replace('The ', '').replace(' ', '_')
    image_path = os.path.join(IMAGES_PATH, f"{image_name}.jpg")
    
    print(f"Trying to send image: {image_path}")
    print(f"Card info: {card_info}")
    print(f"File exists: {os.path.exists(image_path)}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    detail_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    detail_keyboard.add(KeyboardButton("–•–æ—á—É —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç—ã"))
    detail_keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"))
    
    if os.path.exists(image_path):
        try:
            await message.bot.send_photo(
                message.chat.id, 
                InputFile(image_path),
                caption=prediction_text,
                reply_markup=detail_keyboard
            )
            print("Image and text sent successfully")
        except Exception as e:
            print(f"Error sending image: {e}")
            await message.reply(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã. " + prediction_text,
                reply_markup=detail_keyboard
            )
    else:
        print(f"Image file not found: {image_path}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" + prediction_text,
            reply_markup=detail_keyboard
        )

async def handle_history_request(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or "current_card" not in user_data[user_id]:
        await message.reply(
            "üåô –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º–∞–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ–π –ø–æ—Ç–µ—Ä—è–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
        return

    card_info = user_data[user_id]["current_card"]
    history = card_info.get("history", "–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"))
    history_text = (
        f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã {card_info['ru']}*\n\n"
        f"‚ú® {history}\n\n"
        "üîÆ –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –¥—Ä–µ–≤–Ω—é—é –º—É–¥—Ä–æ—Å—Ç—å –∏ —Å–∏–ª—É..."
    )
    await message.reply(history_text, parse_mode="Markdown", reply_markup=keyboard)

async def handle_return_to_themes(message: types.Message):
    await message.reply(
        "üåü –ö –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏ –æ–±—Ä–∞—Ç–∏–º—Å—è —Ç–µ–ø–µ—Ä—å?\n"
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_keyboard()
    )

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(handle_theme, 
                              lambda message: message.text in ["–§–∏–Ω–∞–Ω—Å—ã", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                                                            "–ö–∞—Ä—å–µ—Ä–∞", "–ö–∞—Ä—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü", "–ö–∞—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é", "–ü–æ–¥—Å–∫–∞–∑–∫–∞"])
    dp.register_message_handler(handle_card_choice, 
                              lambda message: message.text in ["üé¥ –ö–∞—Ä—Ç–∞ ‚ë†", "üé¥ –ö–∞—Ä—Ç–∞ ‚ë°", "üé¥ –ö–∞—Ä—Ç–∞ ‚ë¢"])
    dp.register_message_handler(handle_history_request, lambda message: message.text == "–•–æ—á—É —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç—ã")
    dp.register_message_handler(handle_return_to_themes, lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º") 