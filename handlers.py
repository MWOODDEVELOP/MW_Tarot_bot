from aiogram import Dispatcher, types, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
import os
from config import IMAGES_PATH
from utils.card_manager import CardManager
from utils.user_manager import UserManager
import logging
from games.guess_card import GuessCardGame, get_try_again_keyboard

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
user_manager = UserManager()
# –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_messages = {}
guess_game = GuessCardGame()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"),
        KeyboardButton("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è")
    )
    keyboard.add(
        KeyboardButton("üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è"),
        KeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–∞")
    )
    keyboard.add(
        KeyboardButton("üåô –ù–∞ –º–µ—Å—è—Ü"),
        KeyboardButton("üåü –ù–∞ –Ω–µ–¥–µ–ª—é")
    )
    keyboard.add(
        KeyboardButton("üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üé≤ –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É")
    )
    return keyboard

async def delete_previous_messages(chat_id: int, user_message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."""
    if chat_id in last_messages:
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            await user_message.bot.delete_message(chat_id, last_messages[chat_id]["bot"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_message.bot.delete_message(chat_id, last_messages[chat_id]["user"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def delete_user_message(message: types.Message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_message_and_save_id(message: types.Message, text: str, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.chat.id in last_messages and "bot" in last_messages[message.chat.id]:
        try:
            await message.bot.delete_message(message.chat.id, last_messages[message.chat.id]["bot"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_user_message(message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    last_messages[message.chat.id] = {
        "bot": sent_message.message_id
    }
    
    return sent_message

async def send_photo_and_save_id(message: types.Message, photo, caption: str = None, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.chat.id in last_messages and "bot" in last_messages[message.chat.id]:
        try:
            await message.bot.delete_message(message.chat.id, last_messages[message.chat.id]["bot"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_user_message(message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    sent_message = await message.answer_photo(photo=photo, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    last_messages[message.chat.id] = {
        "bot": sent_message.message_id
    }
    
    return sent_message

async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ú–∏—Ä –¢–∞—Ä–æ!* ‚ú®\n\n"
        "üîÆ –Ø - –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. "
        "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üåü *–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n\n"
        "üí∞ *–§–∏–Ω–∞–Ω—Å—ã*\n‚îî –†–∞—Å–∫—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤–∞—à–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è\n\n"
        "‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è*\n‚îî –ù–∞–π–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏\n\n"
        "üíº *–ö–∞—Ä—å–µ—Ä–∞*\n‚îî –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã\n\n"
        "üåÖ *–ö–∞—Ä—Ç–∞ –¥–Ω—è*\n‚îî –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –æ–∫—Ä—É–∂–∞—é—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è\n\n"
        "üåü *–ù–∞ –Ω–µ–¥–µ–ª—é*\n‚îî –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ\n\n"
        "üåô *–ù–∞ –º–µ—Å—è—Ü*\n‚îî –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≥—Ä—è–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n\n"
        "‚ú® *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "üé¥ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ —è –≤—ã–±–µ—Ä—É —Ç—Ä–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.\n"
        "üåü –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã.\n"
        "üìú –ü–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –¥—Ä–µ–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
        "üåå *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?*\n"
        "‚îî –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ ‚¨áÔ∏è"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if CardManager.has_saved_spread(user_id):
        welcome_text += "\n\nüé¥ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É)"

    await send_message_and_save_id(message, welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

async def handle_theme(message: types.Message):
    user_id = message.from_user.id
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–º—ã
    theme = message.text.split(' ', 1)[1] if ' ' in message.text else message.text
    
    if not user_manager.can_make_spread(user_id):
        await message.reply(
            "‚ö†Ô∏è *–õ–∏–º–∏—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç*\n\n"
            "üåô –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥—ã—Ö–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É.\n"
            "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.\n\n"
            "üí´ _–ï—Å–ª–∏ –≤–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å tarot_deck.json
    theme_mapping = {
        "üí∞ –§–∏–Ω–∞–Ω—Å—ã": "–§–∏–Ω–∞–Ω—Å—ã",
        "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è": "–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "üíº –ö–∞—Ä—å–µ—Ä–∞": "–ö–∞—Ä—å–µ—Ä–∞",
        "üåô –ù–∞ –º–µ—Å—è—Ü": "–ö–∞—Ä—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü",
        "üåü –ù–∞ –Ω–µ–¥–µ–ª—é": "–ö–∞—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞": "–ü–æ–¥—Å–∫–∞–∑–∫–∞"
    }
    
    actual_theme = theme_mapping.get(message.text, message.text)
    
    cards = CardManager.generate_spread()
    user_data[str(user_id)] = {"theme": actual_theme, "cards": cards}
    user_manager.increment_spreads(user_id)
    CardManager.save_spread(str(user_id), actual_theme, cards)
    
    cards_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cards_keyboard.add(
        KeyboardButton("üé¥"),
        KeyboardButton("üé¥"),
        KeyboardButton("üé¥")
    )
    
    await send_message_and_save_id(
        message,
        "‚ú® *–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ —Ä–∞–∑–ª–æ–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤–∞–º–∏* ‚ú®\n\n"
        "üîÆ –Ø —Ä–∞–∑–ª–æ–∂–∏–ª–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
        "üí´ –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ä—Ç...\n\n"
        "üåü _–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å—ë—Ç —Å–≤–æ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ._",
        reply_markup=cards_keyboard,
        parse_mode="Markdown"
    )

def get_card_image_name(card_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –≤ —Å–ª–æ–≤–∞
    numbers = {
        "Two": "two", "Three": "three", "Four": "four", "Five": "five",
        "Six": "six", "Seven": "seven", "Eight": "eight", "Nine": "nine",
        "Ten": "ten", "Ace": "ace", "Page": "page", "Knight": "knight",
        "Queen": "queen", "King": "king"
    }
    
    # –£–±–∏—Ä–∞–µ–º "The " –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    name = card_name.replace("The ", "")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = name.split()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if parts[0] in numbers:
        parts[0] = numbers[parts[0]]
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
    name = "_".join(parts)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_name}")
    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {name}")
    
    return name

async def handle_card_choice(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        await message.reply(
            "‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å*\n\n"
            "üåô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥, –≤—ã–±—Ä–∞–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ñ–µ—Ä—É.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–∂–∞—Ç–∏—è
    cards = user_data[user_id]["cards"]
    theme = user_data[user_id]["theme"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "current_card_index" not in user_data[user_id]:
        user_data[user_id]["current_card_index"] = 0
    card_index = user_data[user_id]["current_card_index"]
    user_data[user_id]["current_card_index"] = (card_index + 1) % 3
    
    card_name = cards[card_index]
    card_info = CardManager.get_card_info(card_name)
    user_data[user_id]["current_card"] = card_info
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã"),
        KeyboardButton("üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
    message_text = (
        f"‚ú® *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä—ã {theme}* ‚ú®\n\n"
        f"üé¥ *{card_info['ru']}*\n\n"
        f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:*\n‚îî _{card_info[theme]}_\n\n"
        "üåü *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
        "‚îî –£–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    if user_manager.get_user(int(user_id))["show_images"]:
        image_name = get_card_image_name(card_info['en'])
        image_path = os.path.join(IMAGES_PATH, f"{image_name}.jpg")
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        
        try:
            if os.path.exists(image_path):
                logging.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {image_path}")
                with open(image_path, 'rb') as photo:
                    await send_photo_and_save_id(
                        message,
                        photo=photo,
                        caption=message_text,
                        parse_mode="Markdown",
                        reply_markup=keyboard
                    )
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                await send_message_and_save_id(
                    message,
                    message_text + "\n\n‚ö†Ô∏è _–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_message_and_save_id(
                message,
                message_text + "\n\n‚ö†Ô∏è _–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã_",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    else:
        await send_message_and_save_id(
            message,
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_history_request(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or "current_card" not in user_data[user_id]:
        await message.reply(
            "‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ–π –ø–æ—Ç–µ—Ä—è–Ω–∞*\n\n"
            "üåô –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
        return

    card_info = user_data[user_id]["current_card"]
    history = card_info.get("history", "–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...")
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"))
    
    history_text = (
        f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã {card_info['ru']}* üìú\n\n"
        f"‚ú® _{history}_\n\n"
        "üåü *–ú—É–¥—Ä–æ—Å—Ç—å –≤–µ–∫–æ–≤:*\n"
        "‚îî –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –¥—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Å–∏–ª—É...\n\n"
        "üîÆ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥?"
    )
    
    if user_manager.get_user(int(user_id))["show_images"]:
        image_name = get_card_image_name(card_info['en'])
        image_path = os.path.join(IMAGES_PATH, f"{image_name}.jpg")
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await send_photo_and_save_id(
                    message,
                    photo=photo,
                    caption=history_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                return
    
    await send_message_and_save_id(
        message,
        history_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_return_to_themes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã –≥–∞–¥–∞–Ω–∏—è."""
    await send_message_and_save_id(
        message,
        "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è* ‚ú®\n\n"
        "üåü –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ —Ç–∞–π–Ω—ã...\n"
        "‚îî –ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—Å —Å–µ–π—á–∞—Å?",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def settings_menu(message: types.Message):
    user = user_manager.get_user(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            f"{'üåû' if user['theme'] == 'light' else 'üåô'} –¢–µ–º–∞: {'–°–≤–µ—Ç–ª–∞—è' if user['theme'] == 'light' else '–¢—ë–º–Ω–∞—è'}",
            callback_data="toggle_theme"
        ),
        InlineKeyboardButton(
            f"{'üñº' if user['show_images'] else 'üìù'} –ö–∞—Ä—Ç—ã: {'–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' if user['show_images'] else '–¢–µ–∫—Å—Ç–æ–º'}",
            callback_data="toggle_images"
        ),
        InlineKeyboardButton(
            f"{'üîî' if user['daily_prediction'] else 'üîï'} –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è: {'–í–∫–ª—é—á–µ–Ω–æ' if user['daily_prediction'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}",
            callback_data="toggle_daily"
        )
    )
    
    await send_message_and_save_id(
        message,
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞*\n\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "üåì *–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è*\n‚îî –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–ª—è –≤–∞—Å —Å—Ç–∏–ª—å\n\n"
        "üñº *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç*\n‚îî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "üîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è*\n‚îî –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n\n"
        "_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫_",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_settings_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = user_manager.get_user(user_id)
    
    if callback.data == "toggle_theme":
        new_theme = "dark" if user["theme"] == "light" else "light"
        user_manager.update_preferences(user_id, theme=new_theme)
        await callback.answer(
            f"‚ú® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'—Ç—ë–º–Ω—É—é üåô' if new_theme == 'dark' else '—Å–≤–µ—Ç–ª—É—é üåû'}"
        )
    
    elif callback.data == "toggle_images":
        new_show_images = not user["show_images"]
        user_manager.update_preferences(user_id, show_images=new_show_images)
        await callback.answer(
            f"üé¥ –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è {'—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' if new_show_images else '—Ç–µ–∫—Å—Ç–æ–º'}"
        )
    
    elif callback.data == "toggle_daily":
        is_subscribed = user_manager.toggle_daily_prediction(user_id)
        await callback.answer(
            f"{'üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞' if is_subscribed else 'üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç'} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=1)
    user = user_manager.get_user(user_id)
    
    keyboard.add(
        InlineKeyboardButton(
            f"{'üåû' if user['theme'] == 'light' else 'üåô'} –¢–µ–º–∞: {'–°–≤–µ—Ç–ª–∞—è' if user['theme'] == 'light' else '–¢—ë–º–Ω–∞—è'}",
            callback_data="toggle_theme"
        ),
        InlineKeyboardButton(
            f"{'üñº' if user['show_images'] else 'üìù'} –ö–∞—Ä—Ç—ã: {'–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' if user['show_images'] else '–¢–µ–∫—Å—Ç–æ–º'}",
            callback_data="toggle_images"
        ),
        InlineKeyboardButton(
            f"{'üîî' if user['daily_prediction'] else 'üîï'} –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è: {'–í–∫–ª—é—á–µ–Ω–æ' if user['daily_prediction'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}",
            callback_data="toggle_daily"
        )
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞*\n\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "üåì *–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è*\n‚îî –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–ª—è –≤–∞—Å —Å—Ç–∏–ª—å\n\n"
        "üñº *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç*\n‚îî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "üîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è*\n‚îî –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n\n"
        "_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫_"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    edited_message = await callback.message.edit_text(
        settings_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    last_messages[callback.message.chat.id] = {
        "bot": edited_message.message_id
    }

async def send_daily_prediction(bot: Bot):
    subscribers = user_manager.get_daily_prediction_subscribers()
    card_manager = CardManager()
    
    for user_id in subscribers:
        try:
            user = user_manager.get_user(user_id)
            card = card_manager.get_random_card()
            
            message_text = (
                "‚ú® *–í–∞—à–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –°–µ–≥–æ–¥–Ω—è* ‚ú®\n\n"
                f"üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è: *{card['ru']}*\n\n"
                f"üìú –ü–æ—Å–ª–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n‚îî _{card['–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']}_\n\n"
                "üåü –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º –º—É–¥—Ä–æ—Å—Ç—å –∏ –æ–∑–∞—Ä–µ–Ω–∏–µ!\n"
                "‚îî _–í–∞—à –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫_"
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if user_id in last_messages and "bot" in last_messages[user_id]:
                try:
                    await bot.delete_message(user_id, last_messages[user_id]["bot"])
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if user["show_images"]:
                image_name = get_card_image_name(card['en'])
                image_path = os.path.join(IMAGES_PATH, f"{image_name}.jpg")
                if os.path.exists(image_path):
                    sent_message = await bot.send_photo(
                        user_id,
                        photo=InputFile(image_path),
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                else:
                    sent_message = await bot.send_message(
                        user_id,
                        message_text,
                        parse_mode="Markdown"
                    )
            else:
                sent_message = await bot.send_message(
                    user_id,
                    message_text,
                    parse_mode="Markdown"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            last_messages[user_id] = {
                "bot": sent_message.message_id
            }
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue

async def handle_guess_card_game(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É '–£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É'."""
    target_card, options, keyboard = guess_game.start_new_game(message.from_user.id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    logging.info(f"–ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {target_card}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    game_text = (
        "üé≤ *–ò–≥—Ä–∞: –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É* üé≤\n\n"
        f"‚ú® –Ø –∑–∞–≥–∞–¥–∞–ª–∞ –∫–∞—Ä—Ç—É *{target_card['ru']}*\n\n"
        "üé¥ –ü–µ—Ä–µ–¥ –≤–∞–º–∏ 5 –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç\n"
        "‚îî –ù–∞–π–¥–∏—Ç–µ –∑–∞–≥–∞–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Å—Ä–µ–¥–∏ –Ω–∏—Ö!\n\n"
        "üí´ –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏..."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    image_name = get_card_image_name(target_card['en'])
    image_path = os.path.join(IMAGES_PATH, f"{image_name}.jpg")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    logging.info(f"–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
    logging.info(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(image_path)}")
    
    if os.path.exists(image_path):
        with open(image_path, 'rb') as photo:
            await send_photo_and_save_id(
                message,
                photo=photo,
                caption=game_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    else:
        await send_message_and_save_id(
            message,
            game_text + "\n\n‚ö†Ô∏è _–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_guess_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    data_parts = callback.data.split('_')
    selected_index = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_correct, target_card, selected_card = guess_game.check_guess(callback.from_user.id, selected_index)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    
    if is_correct:
        success_text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏!* üéâ\n\n"
            "‚ú® –í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –ø—Ä–∏–≤–µ–ª–∞ –≤–∞—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ!\n\n"
            "üåü –ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã:\n"
            f"‚îî _{target_card.get('history', '–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...')}_\n\n"
            "üí´ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –¥–∞—Ä..."
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
        await send_message_and_save_id(
            callback.message,
            success_text,
            parse_mode="Markdown",
            reply_markup=get_try_again_keyboard()
        )
    else:
        fail_text = (
            "‚ú® *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ —Ç–∞ –∫–∞—Ä—Ç–∞* ‚ú®\n\n"
            f"üé¥ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{selected_card['ru']}*\n"
            f"‚îî _{selected_card.get('history', '–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...')}_\n\n"
            "üí´ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å\n"
            "–∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é –∫–∞—Ä—Ç –¢–∞—Ä–æ...\n"
            "‚îî –ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑?"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        selected_image = get_card_image_name(selected_card['en'])
        selected_path = os.path.join(IMAGES_PATH, f"{selected_image}.jpg")
        
        if os.path.exists(selected_path):
            with open(selected_path, 'rb') as photo:
                await send_photo_and_save_id(
                    callback.message,
                    photo=photo,
                    caption=fail_text,
                    parse_mode="Markdown",
                    reply_markup=get_try_again_keyboard()
                )
        else:
            await send_message_and_save_id(
                callback.message,
                fail_text,
                parse_mode="Markdown",
                reply_markup=get_try_again_keyboard()
            )

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(settings_menu, lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.register_message_handler(handle_theme, 
                              lambda message: any(message.text.endswith(theme) for theme in 
                              ["üí∞ –§–∏–Ω–∞–Ω—Å—ã", "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è", "üíº –ö–∞—Ä—å–µ—Ä–∞", 
                               "üåô –ù–∞ –º–µ—Å—è—Ü", "üåü –ù–∞ –Ω–µ–¥–µ–ª—é", "üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞"]))
    dp.register_message_handler(handle_card_choice, 
                              lambda message: message.text == "üé¥")
    dp.register_message_handler(handle_history_request, lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã")
    dp.register_message_handler(handle_return_to_themes, lambda message: message.text in ["üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", "üîÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–∞–¥–∞–Ω–∏—é"])
    dp.register_callback_query_handler(handle_settings_callback, lambda c: c.data.startswith("toggle_"))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    dp.register_message_handler(handle_guess_card_game, lambda m: m.text == "üé≤ –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É")
    dp.register_message_handler(handle_guess_card_game, lambda m: m.text == "üé≤ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑")
    dp.register_callback_query_handler(handle_guess_callback, lambda c: c.data.startswith("guess_")) 