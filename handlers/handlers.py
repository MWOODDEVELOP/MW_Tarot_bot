from aiogram import Dispatcher, types, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified
import os
from pathlib import Path
from config import IMAGES_PATH
from utils.card_manager import CardManager
from utils.user_manager import UserManager
from utils.image_manager import ImageManager
import logging
from games.guess_card import GuessCardGame, get_try_again_keyboard
import asyncio
from utils.admin_card_editor import AdminCardEditor
from dotenv import load_dotenv
from io import BytesIO
import random
from . import last_messages, bot_monitor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env –∏ –æ—á–∏—â–∞–µ–º –æ—Ç —Å–∫–æ–±–æ–∫
admin_ids_str = os.getenv('ADMIN_IDS', '').strip('[]')
ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
user_manager = UserManager()
image_manager = ImageManager()
guess_game = GuessCardGame()

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
IMAGES_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "images", "tarot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–∞—Ä—Ç
admin_card_editor = AdminCardEditor()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
bot_monitor = None

def set_monitor(monitor):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞."""
    global bot_monitor
    bot_monitor = monitor

async def delete_previous_messages(chat_id: int, user_message: types.Message, new_message_id: int = None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ."""
    if chat_id in last_messages:
        await asyncio.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            if "bot" in last_messages[chat_id]:
                await user_message.bot.delete_message(chat_id, last_messages[chat_id]["bot"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "user" in last_messages[chat_id]:
                await user_message.bot.delete_message(chat_id, last_messages[chat_id]["user"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_message_and_save_id(message: types.Message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = message.chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await message.answer(text, **kwargs)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(chat_id, message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_messages[chat_id] = {
        "user": message.message_id,
        "bot": sent_message.message_id
    }
    
    return sent_message

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"),
        KeyboardButton("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è")
    )
    keyboard.add(
        KeyboardButton("üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è"),
        KeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–∞")
    )
    keyboard.add(
        KeyboardButton("üåô –ù–∞ –º–µ—Å—è—Ü"),
        KeyboardButton("üåü –ù–∞ –Ω–µ–¥–µ–ª—é")
    )
    keyboard.add(
        KeyboardButton("üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üé≤ –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É")
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    current_dir = Path(__file__).parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    feedback_path = current_dir / "utils" / "feedback.py"
    handlers_path = current_dir / "handlers" / "feedback_handlers.py"
    
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")
    logging.info(f"feedback_path: {feedback_path} (exists: {feedback_path.exists()})")
    logging.info(f"handlers_path: {handlers_path} (exists: {handlers_path.exists()})")
    
    if feedback_path.exists() and handlers_path.exists():
        logging.info("–î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        keyboard.add(
            KeyboardButton("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        )
    else:
        logging.info("–ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return keyboard

async def delete_user_message(message: types.Message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_photo_and_save_id(message: types.Message, photo, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = message.chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    sent_message = await message.answer_photo(photo=photo, **kwargs)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(chat_id, message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_messages[chat_id] = {
        "user": message.message_id,
        "bot": sent_message.message_id
    }
    
    return sent_message

async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ú–∏—Ä –¢–∞—Ä–æ!* ‚ú®\n\n"
        "üîÆ –Ø - –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. "
        "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üåü *–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n\n"
        "üí∞ *–§–∏–Ω–∞–Ω—Å—ã*\n‚îî –†–∞—Å–∫—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤–∞—à–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è\n\n"
        "‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è*\n‚îî –ù–∞–π–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏\n\n"
        "üíº *–ö–∞—Ä—å–µ—Ä–∞*\n‚îî –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã\n\n"
        "üåÖ *–ö–∞—Ä—Ç–∞ –¥–Ω—è*\n‚îî –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –æ–∫—Ä—É–∂–∞—é—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è\n\n"
        "üåü *–ù–∞ –Ω–µ–¥–µ–ª—é*\n‚îî –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ\n\n"
        "üåô *–ù–∞ –º–µ—Å—è—Ü*\n‚îî –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≥—Ä—è–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n\n"
        "‚ú® *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "üé¥ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ —è –≤—ã–±–µ—Ä—É —Ç—Ä–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.\n"
        "üåü –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã.\n"
        "üìú –ü–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –¥—Ä–µ–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
        "üåå *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?*\n"
        "‚îî –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ ‚¨áÔ∏è"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if CardManager.has_saved_spread(user_id):
        welcome_text += "\n\nüé¥ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É)"

    await send_message_and_save_id(message, welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

async def handle_theme(message: types.Message):
    user_id = message.from_user.id
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–º—ã
    theme = message.text.split(' ', 1)[1] if ' ' in message.text else message.text
    
    if not await user_manager.can_make_spread(user_id):
        await message.reply(
            "‚ö†Ô∏è *–õ–∏–º–∏—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç*\n\n"
            "üåô –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥—ã—Ö–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É.\n"
            "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.\n\n"
            "üí´ _–ï—Å–ª–∏ –≤–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å tarot_deck.json
    theme_mapping = {
        "üí∞ –§–∏–Ω–∞–Ω—Å—ã": "–§–∏–Ω–∞–Ω—Å—ã",
        "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è": "–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "üíº –ö–∞—Ä—å–µ—Ä–∞": "–ö–∞—Ä—å–µ—Ä–∞",
        "üåô –ù–∞ –º–µ—Å—è—Ü": "–ö–∞—Ä—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü",
        "üåü –ù–∞ –Ω–µ–¥–µ–ª—é": "–ö–∞—Ä—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞": "–ü–æ–¥—Å–∫–∞–∑–∫–∞"
    }
    
    actual_theme = theme_mapping.get(message.text, message.text)
    
    card_manager = CardManager()
    cards = card_manager.generate_spread()
    user_data[str(user_id)] = {"theme": actual_theme, "cards": cards}
    await user_manager.increment_spreads(user_id)
    await card_manager.save_spread(str(user_id), actual_theme, cards)
    
    cards_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cards_keyboard.add(
        KeyboardButton("üé¥"),
        KeyboardButton("üé¥"),
        KeyboardButton("üé¥")
    )
    
    await send_message_and_save_id(
        message,
        "‚ú® *–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ —Ä–∞–∑–ª–æ–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤–∞–º–∏* ‚ú®\n\n"
        "üîÆ –Ø —Ä–∞–∑–ª–æ–∂–∏–ª–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
        "üí´ –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ä—Ç...\n\n"
        "üåü _–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å—ë—Ç —Å–≤–æ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ._",
        reply_markup=cards_keyboard,
        parse_mode="Markdown"
    )

def get_card_image_name(card_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    # –£–±–∏—Ä–∞–µ–º "The " –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    name = card_name.replace("The ", "")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = name.split()
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
    name = "_".join(parts)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_name}")
    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {name}")
    logging.info(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.join(IMAGES_DIR, f'{name}.jpg')}")
    
    return name

async def handle_card_choice(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        await message.reply(
            "‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å*\n\n"
            "üåô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥, –≤—ã–±—Ä–∞–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ñ–µ—Ä—É.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–∂–∞—Ç–∏—è
    cards = user_data[user_id]["cards"]
    theme = user_data[user_id]["theme"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "current_card_index" not in user_data[user_id]:
        user_data[user_id]["current_card_index"] = 0
    card_index = user_data[user_id]["current_card_index"]
    user_data[user_id]["current_card_index"] = (card_index + 1) % 3
    
    card_name = cards[card_index]
    card_manager = CardManager()
    card_info = await card_manager.get_card_info(card_name)
    user_data[user_id]["current_card"] = card_info
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥")
    )
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    endings = [
        "üé¥ *–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ —Ä–∞—Å–∫—Ä—ã–ª–∏ —Å–≤–æ—é —Ç–∞–π–Ω—É...* –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∏—Ö –º—É–¥—Ä–æ—Å—Ç–∏",
        "üîÆ *–î—Ä–µ–≤–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –ø—É—Ç—å...* –°–ª–µ–¥—É–π—Ç–µ –∏—Ö –∑–Ω–∞–∫–∞–º",
        "üé¥ *–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ä–∫–∞–Ω—ã –≥–æ–≤–æ—Ä—è—Ç —Å –≤–∞–º–∏...* –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏—Ö —Å–∏–ª–µ",
        "üîÆ *–ö–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã–ª–∏ –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ...* –ü–æ–∑–Ω–∞–π—Ç–µ –∏—Ö –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è",
        "üé¥ *–¢–∞—Ä–æ –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é...* –ü—Ä–∏–º–∏—Ç–µ –∏—Ö –ø–æ—Å–ª–∞–Ω–∏–µ",
        "üé¥ *–î—Ä–µ–≤–Ω–∏–µ –∞—Ä–∫–∞–Ω—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...* –ü–æ–∑–Ω–∞–π—Ç–µ –∏—Ö –∏—Å—Ç–∏–Ω—É"
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
    message_text = (
        f"‚ú® *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä—ã {theme}* ‚ú®\n\n"
        f"üé¥ *{card_info['ru']}*\n\n"
        f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:*\n‚îî _{card_info[theme]}_\n\n"
        f"{random.choice(endings)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    user = await user_manager.get_user(int(user_id))
    if user["show_images"]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ImageManager
            image_bytes = await image_manager.get_image(card_info['en'])
            if image_bytes:
                photo = BytesIO(image_bytes)
                photo.name = f"{card_info['en']}.jpg"
                await send_photo_and_save_id(
                    message,
                    photo=photo,
                    caption=message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            else:
                await send_message_and_save_id(
                    message,
                    message_text + "\n\n‚ö†Ô∏è _–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_message_and_save_id(
                message,
                message_text + "\n\n‚ö†Ô∏è _–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã_",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    else:
        await send_message_and_save_id(
            message,
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_history_request(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or "current_card" not in user_data[user_id]:
        await message.reply(
            "‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ–π –ø–æ—Ç–µ—Ä—è–Ω–∞*\n\n"
            "üåô –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
        return

    card_info = user_data[user_id]["current_card"]
    history = card_info.get("history", "–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...")
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"))
    
    history_text = (
        f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã {card_info['ru']}* üìú\n\n"
        f"‚ú® _{history}_\n\n"
        "üåü *–ú—É–¥—Ä–æ—Å—Ç—å –≤–µ–∫–æ–≤:*\n"
        "‚îî –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –¥—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Å–∏–ª—É...\n\n"
        "üîÆ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥?"
    )
    
    if user_manager.get_user(int(user_id))["show_images"]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ImageManager
            image_bytes = await image_manager.get_image(card_info['en'])
            if image_bytes:
                photo = BytesIO(image_bytes)
                photo.name = f"{card_info['en']}.jpg"
                await send_photo_and_save_id(
                    message,
                    photo=photo,
                    caption=history_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    await send_message_and_save_id(
        message,
        history_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_return_to_themes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã –≥–∞–¥–∞–Ω–∏—è."""
    await send_message_and_save_id(
        message,
        "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è* ‚ú®\n\n"
        "üåü –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ —Ç–∞–π–Ω—ã...\n"
        "‚îî –ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—Å —Å–µ–π—á–∞—Å?",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def settings_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user = await user_manager.get_user(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            f"{'üåû' if user['theme'] == 'light' else 'üåô'} –¢–µ–º–∞: {'–°–≤–µ—Ç–ª–∞—è' if user['theme'] == 'light' else '–¢—ë–º–Ω–∞—è'}",
            callback_data="toggle_theme"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="reset_settings"
        )
    )
    
    await message.reply(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def handle_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_id = callback.from_user.id
    user = await user_manager.get_user(user_id)
    logging.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user}")
    
    if callback.data == "toggle_theme":
        new_theme = "dark" if user["theme"] == "light" else "light"
        await user_manager.update_preferences(user_id, theme=new_theme)
        await callback.answer(
            f"‚ú® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'—Ç—ë–º–Ω—É—é üåô' if new_theme == 'dark' else '—Å–≤–µ—Ç–ª—É—é üåû'}"
        )
    
    elif callback.data == "reset_settings":
        await user_manager.reset_preferences(user_id)
        await callback.answer("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user = await user_manager.get_user(user_id)
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    if user["theme"] == "light":
        theme_emoji = "üåû"
        theme_text = "–°–≤–µ—Ç–ª–∞—è"
        message_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            "üé® –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: –°–≤–µ—Ç–ª–∞—è üåû\n\n"
            "‚òÄÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
        )
    else:
        theme_emoji = "üåô"
        theme_text = "–¢—ë–º–Ω–∞—è"
        message_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            "üé® –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: –¢—ë–º–Ω–∞—è üåô\n\n"
            "üå† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            f"{theme_emoji} –¢–µ–º–∞: {theme_text}",
            callback_data="toggle_theme"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="reset_settings"
        )
    )
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except MessageNotModified:
        logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        pass

async def send_daily_prediction(bot: Bot):
    subscribers = await user_manager.get_daily_prediction_subscribers()
    card_manager = CardManager()
    
    for user_id in subscribers:
        try:
            user = await user_manager.get_user(user_id)
            card = await card_manager.get_random_card()
            
            message_text = (
                "‚ú® *–í–∞—à–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –°–µ–≥–æ–¥–Ω—è* ‚ú®\n\n"
                f"üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è: *{card['ru']}*\n\n"
                f"üìú –ü–æ—Å–ª–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n‚îî _{card['–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']}_\n\n"
                "üåü –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º –º—É–¥—Ä–æ—Å—Ç—å –∏ –æ–∑–∞—Ä–µ–Ω–∏–µ!\n"
                "‚îî _–í–∞—à –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫_"
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if user_id in last_messages and "bot" in last_messages[user_id]:
                try:
                    await bot.delete_message(user_id, last_messages[user_id]["bot"])
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if user["show_images"]:
                image_name = get_card_image_name(card['en'])
                image_path = os.path.join(IMAGES_DIR, f"{image_name}.jpg")
                if os.path.exists(image_path):
                    sent_message = await bot.send_photo(
                        user_id,
                        photo=InputFile(image_path),
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                else:
                    sent_message = await bot.send_message(
                        user_id,
                        message_text,
                        parse_mode="Markdown"
                    )
            else:
                sent_message = await bot.send_message(
                    user_id,
                    message_text,
                    parse_mode="Markdown"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            last_messages[user_id] = {
                "bot": sent_message.message_id
            }
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue

async def handle_guess_card_game(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É '–£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É'."""
    target_card, options, keyboard = guess_game.start_new_game(message.from_user.id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    logging.info(f"–ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {target_card}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    game_text = (
        "üé≤ *–ò–≥—Ä–∞: –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É* üé≤\n\n"
        f"‚ú® –Ø –∑–∞–≥–∞–¥–∞–ª–∞ –∫–∞—Ä—Ç—É *{target_card['ru']}*\n\n"
        "üé¥ –ü–µ—Ä–µ–¥ –≤–∞–º–∏ 5 –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç\n"
        "‚îî –ù–∞–π–¥–∏—Ç–µ –∑–∞–≥–∞–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Å—Ä–µ–¥–∏ –Ω–∏—Ö!\n\n"
        "üí´ –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏..."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ImageManager
        image_bytes = await image_manager.get_image(target_card['en'])
        if image_bytes:
            photo = BytesIO(image_bytes)
            photo.name = f"{target_card['en']}.jpg"
            await send_photo_and_save_id(
                message,
                photo=photo,
                caption=game_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        else:
            await send_message_and_save_id(
                message,
                game_text + "\n\n‚ö†Ô∏è _–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await send_message_and_save_id(
            message,
            game_text + "\n\n‚ö†Ô∏è _–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã_",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_guess_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    data_parts = callback.data.split('_')
    selected_index = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_correct, target_card, selected_card = guess_game.check_guess(callback.from_user.id, selected_index)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏–∑ callback.message
    message = callback.message
    message.from_user = callback.from_user
    
    if is_correct:
        success_text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏!* üéâ\n\n"
            "‚ú® –í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –ø—Ä–∏–≤–µ–ª–∞ –≤–∞—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ!\n\n"
            "üåü –ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã:\n"
            f"‚îî _{target_card.get('history', '–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...')}_\n\n"
            "üí´ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –¥–∞—Ä..."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
        chat_id = message.chat.id
        last_messages[chat_id] = {
            "bot": message.message_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_message_and_save_id(
            message,
            success_text,
            parse_mode="Markdown",
            reply_markup=get_try_again_keyboard()
        )
    else:
        fail_text = (
            "‚ú® *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ —Ç–∞ –∫–∞—Ä—Ç–∞* ‚ú®\n\n"
            f"üé¥ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{selected_card['ru']}*\n"
            f"‚îî _{selected_card.get('history', '–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –æ–∫—É—Ç–∞–Ω–∞ —Ç–∞–π–Ω–æ–π...')}_\n\n"
            "üí´ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å\n"
            "–∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é –∫–∞—Ä—Ç –¢–∞—Ä–æ...\n"
            "‚îî –ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑?"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
        chat_id = message.chat.id
        last_messages[chat_id] = {
            "bot": message.message_id
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ImageManager
            image_bytes = await image_manager.get_image(selected_card['en'])
            if image_bytes:
                photo = BytesIO(image_bytes)
                photo.name = f"{selected_card['en']}.jpg"
                await send_photo_and_save_id(
                    message,
                    photo=photo,
                    caption=fail_text,
                    parse_mode="Markdown",
                    reply_markup=get_try_again_keyboard()
                )
            else:
                await send_message_and_save_id(
                    message,
                    fail_text,
                    parse_mode="Markdown",
                    reply_markup=get_try_again_keyboard()
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_message_and_save_id(
                message,
                fail_text,
                parse_mode="Markdown",
                reply_markup=get_try_again_keyboard()
            )

async def admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é."""
    if message.from_user.id not in ADMIN_IDS:
        return
        
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="edit_card_start"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_main")
    )
    
    await send_message_and_save_id(
        message,
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_edit_card_start(callback: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç
    cards = admin_card_editor.get_all_cards()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for card in cards:
        buttons.append(InlineKeyboardButton(
            card,
            callback_data=f"select_card_{card}"
        ))
    keyboard.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    
    await callback.message.edit_text(
        "üé¥ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_card_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    card_name = callback.data.replace("select_card_", "")
    card_info = admin_card_editor.get_card_info(card_name)
    
    if not card_info:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    edit_states[callback.from_user.id] = {"card": card_name}
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for field in admin_card_editor.get_all_fields():
        keyboard.add(InlineKeyboardButton(
            f"üìù {field}",
            callback_data=f"edit_field_{field}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_card_start"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    text = f"üé¥ *–ö–∞—Ä—Ç–∞: {card_name}*\n\n"
    for field in admin_card_editor.get_all_fields():
        text += f"*{field}:*\n‚îî _{card_info.get(field, '–ù–µ –∑–∞–¥–∞–Ω–æ')}_\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_field_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    field = callback.data.replace("edit_field_", "")
    user_state = edit_states.get(callback.from_user.id)
    
    if not user_state:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_state["field"] = field
    edit_states[callback.from_user.id] = user_state
    
    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã {user_state['card']}*\n\n"
        f"–ü–æ–ª–µ: *{field}*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"select_card_{user_state['card']}")
        )
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    user_state["waiting_for_value"] = True

async def handle_new_value(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è."""
    if message.from_user.id not in ADMIN_IDS:
        return
        
    user_state = edit_states.get(message.from_user.id)
    if not user_state or not user_state.get("waiting_for_value"):
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
    success = admin_card_editor.update_card(
        user_state["card"],
        user_state["field"],
        message.text
    )
    
    if success:
        await message.reply(
            "‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                                   callback_data=f"select_card_{user_state['card']}"),
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", 
                                   callback_data="admin_menu")
            )
        )
    else:
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", 
                                   callback_data=f"select_card_{user_state['card']}")
            )
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    user_state["waiting_for_value"] = False
    edit_states[message.from_user.id] = user_state

async def handle_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    total_users = len(user_manager.users)
    daily_subscribers = len(user_manager.get_daily_prediction_subscribers())
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîî –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {daily_subscribers}\n"
        "‚îî _(–ë—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è)_"
    )
    
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    
    await callback.message.edit_text(
        stats_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_return_to_main(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ send_message_and_save_id
    message = callback.message
    message.from_user = callback.from_user
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω-–º–µ–Ω—é
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await send_message_and_save_id(
        message,
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def handle_admin_menu_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="edit_card_start"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_main")
    )
    
    await callback.message.edit_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def send_card_image(message: types.Message, card_info: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã."""
    try:
        image_data = await image_manager.get_image(card_info['en'])
        if image_data:
            await message.answer_photo(
                photo=image_data,
                caption=f"üé¥ {card_info['ru']}\n\n{card_info['meaning']}"
            )
        else:
            await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã {card_info['ru']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã")

async def cmd_stats(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞."""
    if message.from_user.id not in ADMIN_IDS:
        return
        
    if not bot_monitor:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
        
    try:
        report = bot_monitor.get_stats_report()
        await message.reply(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n{report}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def handle_try_again(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'."""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏–∑ callback.message
    message = callback.message
    message.from_user = callback.from_user
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    await handle_guess_card_game(message)

async def handle_return_to_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'."""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏–∑ callback.message
    message = callback.message
    message.from_user = callback.from_user
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_message_and_save_id(
        message,
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* ‚ú®\n\n"
        "üåü –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

def register_handlers(dp: Dispatcher, log_decorator=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    if log_decorator is None:
        log_decorator = lambda x: x
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(log_decorator(cmd_start), commands=['start'])
    dp.register_message_handler(log_decorator(settings_menu), lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.register_message_handler(log_decorator(handle_theme), 
                              lambda message: any(message.text.endswith(theme) for theme in 
                              ["üí∞ –§–∏–Ω–∞–Ω—Å—ã", "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è", "üíº –ö–∞—Ä—å–µ—Ä–∞", 
                               "üåô –ù–∞ –º–µ—Å—è—Ü", "üåü –ù–∞ –Ω–µ–¥–µ–ª—é", "üí´ –ü–æ–¥—Å–∫–∞–∑–∫–∞"]))
    dp.register_message_handler(log_decorator(handle_card_choice), 
                              lambda message: message.text == "üé¥")
    dp.register_message_handler(log_decorator(handle_history_request), lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç—ã")
    dp.register_message_handler(log_decorator(handle_return_to_themes), lambda message: message.text in ["üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", "üîÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–∞–¥–∞–Ω–∏—é"])
    dp.register_callback_query_handler(log_decorator(handle_settings_callback), lambda c: c.data in ["toggle_theme", "reset_settings"])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    dp.register_message_handler(log_decorator(handle_guess_card_game), lambda m: m.text == "üé≤ –£–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É")
    dp.register_callback_query_handler(log_decorator(handle_guess_callback), lambda c: c.data.startswith("guess_"))
    dp.register_callback_query_handler(log_decorator(handle_try_again), lambda c: c.data == "try_again")
    dp.register_callback_query_handler(log_decorator(handle_return_to_menu), lambda c: c.data == "return_to_menu")
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.register_message_handler(log_decorator(admin_menu), commands=['admin'])
    dp.register_callback_query_handler(log_decorator(handle_edit_card_start), lambda c: c.data == "edit_card_start")
    dp.register_callback_query_handler(log_decorator(handle_card_selection), lambda c: c.data.startswith("select_card_"))
    dp.register_callback_query_handler(log_decorator(handle_field_selection), lambda c: c.data.startswith("edit_field_"))
    dp.register_callback_query_handler(log_decorator(handle_admin_menu_callback), lambda c: c.data == "admin_menu")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    dp.register_message_handler(log_decorator(handle_return_to_themes), lambda msg: msg.text == "üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.register_message_handler(
        log_decorator(cmd_stats),
        lambda message: message.from_user.id in ADMIN_IDS,
        commands=['stats']
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'
    dp.register_callback_query_handler(log_decorator(handle_return_to_menu), lambda c: c.data == "return_to_menu") 