from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from utils.feedback import FeedbackManager
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
feedback_manager = FeedbackManager()

class FeedbackState(StatesGroup):
    waiting_for_type = State()
    waiting_for_message = State()

async def cmd_feedback(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    logging.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üêû –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="feedback_bug"),
        types.InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", callback_data="feedback_suggestion")
    )
    await message.reply(
        "üìù *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_feedback_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    feedback_type = callback.data.split('_')[1]
    await state.update_data(feedback_type=feedback_type)
    
    if feedback_type == "bug":
        text = (
            "üêû *–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ*\n\n"
            "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É:\n"
            "- –ß—Ç–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å?\n"
            "- –ß—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?\n"
            "- –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –æ–∂–∏–¥–∞–ª–∏ —É–≤–∏–¥–µ—Ç—å?"
        )
    else:
        text = (
            "üí° *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞.\n"
            "–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"
        )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown"
    )
    await FeedbackState.waiting_for_message.set()

async def handle_feedback_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    data = await state.get_data()
    feedback_type = data.get('feedback_type')
    
    success = await feedback_manager.add_feedback(
        message.from_user.id,
        feedback_type,
        message.text
    )
    
    if success:
        if feedback_type == "bug":
            response = "üêû –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ–±–ª–µ–º—É."
        else:
            response = "üí° –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∏–¥–µ—é."
    else:
        response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await message.reply(response)
    await state.finish()

def register_feedback_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    dp.register_message_handler(cmd_feedback, commands=['feedback'])
    dp.register_message_handler(cmd_feedback, lambda m: m.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    dp.register_callback_query_handler(
        handle_feedback_type,
        lambda c: c.data.startswith('feedback_'),
        state="*"
    )
    dp.register_message_handler(
        handle_feedback_message,
        state=FeedbackState.waiting_for_message,
        content_types=types.ContentTypes.TEXT
    ) 